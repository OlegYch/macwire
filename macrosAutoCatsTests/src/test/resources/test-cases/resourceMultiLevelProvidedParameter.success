#include commonSimpleClasses

val allocated = scala.collection.mutable.ListBuffer[String]()

object Test {
  val theA: Resource[IO, A] = Resource.make(IO { allocated.append("A"); A() })(_ => IO.unit)
  val theE: Resource[IO, E] = autowire[E](theA)
}

val theE: E = {
  import cats.effect.unsafe.implicits.global
  Test.theE.allocated.unsafeRunSync()._1
}

require(theE.a != null)
require(theE.c != null)
require(theE.c.a != null)
require(theE.c.b != null)

require(allocated.contains("A"))
require(allocated.length == 1) // should be allocated once
