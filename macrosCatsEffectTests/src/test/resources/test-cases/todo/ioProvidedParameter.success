import com.softwaremill.macwire.catseffectsupport._

#include commonSimpleClasses
import cats.effect._

val allocated = scala.collection.mutable.Set[String]()

object Test {
  val theA: IO[A] = IO { allocated.add("A"); A() }
  val theB: IO[B] = IO { allocated.add("B"); B() }
  val theC: Resource[IO, C] = wireApp[C](theA, theB)
}

val theC: C = {
  import cats.effect.unsafe.implicits.global
  Test.theC.allocated.unsafeRunSync()._1
}

require(theC.a != null)
require(theC.b != null)

require(allocated.contains("A"))
require(allocated.contains("B"))