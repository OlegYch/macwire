import scala.collection.mutable.ListBuffer

class A()
class B()
class C(val a: A, val b: B)
case class D(c: C, b: B)

val created = scala.collection.mutable.ListBuffer[String]()

object Test {

  val ioA: IO[A] = IO { created.append("a"); new A() }
  def makeB(a: A): Resource[IO, B] = Resource.eval(IO { created.append("b"); new B() })
  def makeC(a: A, b: B): Resource[IO, C] = Resource.eval(IO { created.append("c"); new C(a, b) })


  val theD = autowire[D](ioA, makeC _, makeB _)

}

val theD: D = {
  import cats.effect.unsafe.implicits.global
  Test.theD.allocated.unsafeRunSync()._1
}

require(theD.c != null)
require(theD.c.b == theD.b)

require(created.size == 3)
require(created(0) == "a")
require(created(1) == "b")
require(created(2) == "c")
